* Inline F#
** Model for CLR types
*** Requirements
**** Marshalling
     Marshalling is mostly a non problem if we can reuse the Marshall type class defined in clr-bindings
**** Translation to fully qualified CLR names
     Symbols can be used to store these names at the type level, but might have to introduce some sugar due to verbosity.
**** Support for array types
**** Support for generic types
*** Option 1: use the clr-bindings / clr model
    - Perhaps wrapping in metadata newtypes.
*** TODO Option 2: roll our own representation of CLR types
    Do we need singletons ? Yes.
    We need a term level representation of CLR types for our parser.
    And a type level representation for use in typing CLR values.
    I think this means we cannot reuse the clr-bindings representation, because it lacks the term level.
** Result types
*** DONE Required for generating the FFI wrapper.
    CLOSED: [2017-04-02 Sun 18:04]
    Move the FFI wrapper generation to the finalizer
    This didn't work, as the FFI wrapper must be in scope when splicing the invoke call.
*** Cannot be extracted from the Haskell source
    TH does not give us access to user provided type annotations on the TH quotation
*** +Can be extracted from the F# compiler using, e.g. signature files.+
    Do signature names contain fully qualified names ?
    The answer is mostly yes (except for locally defined types)
*** +Can be extracted from the generated F# program using reflection and a little driver.+
    This option seems the most flexible one, as we can choose what to output.
    The downside is that we have to run the compiler once for every snippet, instead of once per module.
    Update: we have to run the compiler per snippet either way,
    since the FFI stubs must be generated together with the invoke call.
    But note that the types become available only at TH finalizer time, as this is when the F# code is generated
*** +Can also be extracted from generated metadata, i.e. type class instances+
    This is the option that Salsa uses currently, but it wouldn't help us,
    we cannot expect the user to enter this metadata for every inlined snippet.
*** DONE Can also be extracted from the quoted code
    CLOSED: [2017-04-06 Thu 22:41]
    This is the approach taken by inline C with snippets of the form:
      double { 
         ... 
         }
    It's a bit uglier, but low cost. This is done and working well.
*** DONE Can be user provided via an optional config parameter
    CLOSED: [2017-04-02 Sun 18:01]
    This is done, but it is very inconvenient to use, 
    since quasiquoter invocations cannot contain any arguments or type apps
** Argument types
*** Required for generating the FFI wrapper
    The FFI wrapper must align with the types produced by the clr-host keyhole.
*** Required for generating the getMethodStub call
    The getMethodStub call must contain the full CLR names for all the argument types.
*** Required for generating the F# code
    Despite F# type inference, we want to annotate argument types to avoid runtime errors when the F# types and the Haskell types don't match.
*** +Can be extracted from the Haskell source+
    Depending on how much type information we retain in the Haskell side.
    But note that this is only available at finalizer time, and we need the types in the call site in order to generate the foreign wrapper decl.
**** TODO Translator from Haskell CLR types to F# types
*** DONE Can be provided via antiquotation annotations
    CLOSED: [2017-04-13 Thu 21:36]
    This is done now and it is good enough for version 0.1
*** Two options.
**** +Box everything+
     In this approach all the reference types are boxed to Object. Our generated F# snippets manually box and unbox them.
     This gives up CLR type checking on the FFI boundary and can result in runtime errors.
     However could be a first step in the way of initial prototyping.
**** DONE Precise types driven by Haskell side.
     CLOSED: [2017-04-13 Thu 21:36]
     In this approach we retain all the obtained type information (via return types and symbols) on the Haskell side,
     and use it to annotate the arguments in the generated F# snippets.
     The F# compiler will be able to type check the snippets.
     This is the approach we are taking currently.
**** +Precise types driven by F# side.+
     Similar to the above, but without annotating the arguments in the generated F#.
     Instead, we recover the type information inferred by the F# compiler and use it 
     to type our FFI wrapper. 
     This doesn't work: the GHC type checker would need to know when two CLR types are compatible.
** Roadmap
*** DONE Return of value types from CLR to Haskell via quoted types
    CLOSED: [2017-04-13 Thu 21:38]
    Together with implicit? marshalling
*** DONE Returning of reference types via quoted types
    CLOSED: [2017-04-13 Thu 21:39]
    Reference types are stored by name on the Haskell side.
*** DONE Antiquoation of Haskell values 
    CLOSED: [2017-04-13 Thu 21:39]
    Reference types are stored by name on the Haskell side.
    They are sent fully typed to the F# side.
*** DONE Support for arrays .
    CLOSED: [2017-04-14 Fri 11:47]
    We just need special notation because the [|1;2|] syntax clashes with TH.
*** DONE Support for generic types.
    CLOSED: [2017-04-14 Fri 11:40]
    As above, this will hopefully just involve converting F# notation to CLR.
*** Inference of antiquote types
    This will require a new approach to invoking CLR methods that doesnt require a foreign wrapper,
    and instead takes the type information from the argument values. 
    This is the approach used by the jvm package via the JValue type. 
*** Inference of return types
    This will probably be driven by the F# side.
