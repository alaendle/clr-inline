* Inline F#
** Model for CLR types
*** Requirements
**** Marshalling
     Marshalling is mostly a non problem if we can reuse the Marshall type class defined in clr-bindings
**** Translation to fully qualified CLR names
     Symbols can be used to store these names at the type level, but might have to introduce some sugar due to verbosity.
**** Support for array types
**** Support for generic types
*** Option 1: use the clr-bindings / clr model
    - Perhaps wrapping in metadata newtypes.
*** TODO Option 2: roll our own representation of CLR types
    Do we need singletons ? Yes.
    We need a term level representation of CLR types for our parser.
    And a type level representation for use in typing CLR values.
    I think this means we cannot reuse the clr-bindings representation, because it lacks the term level.
** Result types
*** DONE Required for generating the FFI wrapper.
    CLOSED: [2017-04-02 Sun 18:04]
    Move the FFI wrapper generation to the finalizer
    This didn't work, as the FFI wrapper must be in scope when splicing the invoke call.
*** Cannot be extracted from the Haskell source
    TH does not give us access to user provided type annotations on the TH quotation
*** Can be extracted from the F# compiler using, e.g. signature files.
    Do signature names contain fully qualified names ?
    The answer is mostly yes (except for locally defined types)
**** TODO Parser for .sig files (return types only)
*** Can be extracted from the generated F# program using reflection and a little driver.
    This option seems the most flexible one, as we can choose what to output.
    The downside is that we have to run the compiler once for every snippet, instead of once per module.
    Update: we have to run the compiler per snippet either way,
    since the FFI stubs must be generated together with the invoke call.
*** Can also be extracted from generated metadata, i.e. type class instances
    This is the option that Salsa uses currently, but it wouldn't help us,
    we cannot expect the user to enter this metadata for every inlined snippet.
*** DONE Can also be extracted from the quoted code
    CLOSED: [2017-04-06 Thu 22:41]
    This is the approach taken by inline C with snippets of the form:
      double { 
         ... 
         }
    It's a bit uglier, but low cost. This is done and working well.
*** DONE Can be user provided via an optional config parameter
    CLOSED: [2017-04-02 Sun 18:01]
    This is done, but it is very inconvenient to use, 
    since quasiquoter invocations cannot contain any arguments or type apps
** Argument types
*** Required for generating the FFI wrapper
    The FFI wrapper must align with the types produced by the clr-host keyhole.
*** Required for generating the getMethodStub call
    The getMethodStub call must contain the full CLR names for all the argument types.
*** Required for generating the F# code
    Despite F# type inference, we want to annotate argument types to avoid runtime errors when the F# types and the Haskell types don't match.
*** Can be extracted from the Haskell source
    Depending on how much type information we retain in the Haskell side.
**** TODO Translator from Haskell CLR types to F# types
*** Can be provided via antiquotation annotations
    The only motivation for this would be early prototyping
*** Two options.
**** Box everything
     In this approach all the reference types are boxed to Object. Our generated F# snippets manually box and unbox them.
     This gives up CLR type checking on the FFI boundary and can result in runtime errors.
     However could be a first step in the way of initial prototyping.
**** Precise types driven by Haskell side.
     In this approach we retain all the obtained type information (via return types and symbols) on the Haskell side,
     and use it to annotate the arguments in the generated F# snippets.
     The F# compiler will be able to type check the snippets.
**** +Precise types driven by F# side.+
     Similar to the above, but without annotating the arguments in the generated F#.
     Instead, we recover the type information inferred by the F# compiler and use it 
     to type our FFI wrapper. 
     This doesn't work: the GHC type checker would need to know when two CLR types are compatible.
** Roadmap
*** Return of value types from CLR to Haskell via quoted types
    Together with implicit? marshalling
*** Returning of boxed reference types via quoted types
    That is, the ability to return Object to Haskell land.
*** Antiquoation of Haskell values via Object boxes
    The generated F# code will take care of the unboxing.
    That is, the ability to send back previously returned Objects.
*** Return type inference via F# reflection
    This will require a new datatype modelling CLR types at value and type level.
    By using either introspection or signature files to read CLR types
    and store them in Haskell land to track reference types.
*** Well typed antiquotation of Haskell values
    This will rely on the model above to correctly identify CLR methods.
    At this point our F# code generator can stop doing boxing/unboxing
    since we will be able to fully address it by name&types.
